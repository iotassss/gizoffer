/*
 * Gizoffer
 *
 * Gizoffer is a platform that helps you find the best deals with Gizomo employees using GIZ.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package app

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the AuthAPI part of the API
	AuthAPI AuthAPI
	// Routes for the EntriesAPI part of the API
	EntriesAPI EntriesAPI
	// Routes for the OffersAPI part of the API
	OffersAPI OffersAPI
	// Routes for the UsersAPI part of the API
	UsersAPI UsersAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"LoginPost",
			http.MethodPost,
			"/login",
			handleFunctions.AuthAPI.LoginPost,
		},
		{
			"EntriesIdDelete",
			http.MethodDelete,
			"/entries/:id",
			handleFunctions.EntriesAPI.EntriesIdDelete,
		},
		{
			"EntriesIdGet",
			http.MethodGet,
			"/entries/:id",
			handleFunctions.EntriesAPI.EntriesIdGet,
		},
		{
			"EntriesIdPut",
			http.MethodPut,
			"/entries/:id",
			handleFunctions.EntriesAPI.EntriesIdPut,
		},
		{
			"OffersGet",
			http.MethodGet,
			"/offers",
			handleFunctions.OffersAPI.OffersGet,
		},
		{
			"OffersIdDelete",
			http.MethodDelete,
			"/offers/:id",
			handleFunctions.OffersAPI.OffersIdDelete,
		},
		{
			"OffersIdGet",
			http.MethodGet,
			"/offers/:id",
			handleFunctions.OffersAPI.OffersIdGet,
		},
		{
			"OffersIdPut",
			http.MethodPut,
			"/offers/:id",
			handleFunctions.OffersAPI.OffersIdPut,
		},
		{
			"OffersPost",
			http.MethodPost,
			"/offers",
			handleFunctions.OffersAPI.OffersPost,
		},
		{
			"UsersGet",
			http.MethodGet,
			"/users",
			handleFunctions.UsersAPI.UsersGet,
		},
		{
			"UsersIdDelete",
			http.MethodDelete,
			"/users/:id",
			handleFunctions.UsersAPI.UsersIdDelete,
		},
		{
			"UsersIdGet",
			http.MethodGet,
			"/users/:id",
			handleFunctions.UsersAPI.UsersIdGet,
		},
		{
			"UsersIdPut",
			http.MethodPut,
			"/users/:id",
			handleFunctions.UsersAPI.UsersIdPut,
		},
		{
			"UsersPost",
			http.MethodPost,
			"/users",
			handleFunctions.UsersAPI.UsersPost,
		},
	}
}
