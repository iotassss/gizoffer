/*
 * Gizoffer
 *
 * Gizoffer is a platform that helps you find the best deals with Gizomo employees using GIZ.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package app

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
	Middleware  []gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}

		if route.Name != "LoginPost" && route.Name != "UsersPost" {
			route.Middleware = append(route.Middleware, AuthMiddleware())
		}
		handlerWithMiddleware := append(route.Middleware, route.HandlerFunc)

		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, handlerWithMiddleware...)
		case http.MethodPost:
			router.POST(route.Pattern, handlerWithMiddleware...)
		case http.MethodPut:
			router.PUT(route.Pattern, handlerWithMiddleware...)
		case http.MethodPatch:
			router.PATCH(route.Pattern, handlerWithMiddleware...)
		case http.MethodDelete:
			router.DELETE(route.Pattern, handlerWithMiddleware...)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the OffersAPI part of the API
	OffersAPI OffersAPI
	// Routes for the UsersAPI part of the API
	UsersAPI UsersAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"OffersGet",
			http.MethodGet,
			"/offers",
			handleFunctions.OffersAPI.OffersGet,
			[]gin.HandlerFunc{},
		},
		{
			"OffersPost",
			http.MethodPost,
			"/offers",
			handleFunctions.OffersAPI.OffersPost,
			[]gin.HandlerFunc{},
		},
		{
			"OffersUuidDelete",
			http.MethodDelete,
			"/offers/:uuid",
			handleFunctions.OffersAPI.OffersUuidDelete,
			[]gin.HandlerFunc{},
		},
		{
			"OffersUuidEntryDelete",
			http.MethodDelete,
			"/offers/:uuid/entry",
			handleFunctions.OffersAPI.OffersUuidEntryDelete,
			[]gin.HandlerFunc{},
		},
		{
			"OffersUuidEntryPost",
			http.MethodPost,
			"/offers/:uuid/entry",
			handleFunctions.OffersAPI.OffersUuidEntryPost,
			[]gin.HandlerFunc{},
		},
		{
			"OffersUuidGet",
			http.MethodGet,
			"/offers/:uuid",
			handleFunctions.OffersAPI.OffersUuidGet,
			[]gin.HandlerFunc{},
		},
		{
			"OffersUuidPut",
			http.MethodPut,
			"/offers/:uuid",
			handleFunctions.OffersAPI.OffersUuidPut,
			[]gin.HandlerFunc{},
		},
		{
			"LoginPost",
			http.MethodPost,
			"/login",
			handleFunctions.UsersAPI.LoginPost,
			[]gin.HandlerFunc{},
		},
		{
			"UsersPost",
			http.MethodPost,
			"/users",
			handleFunctions.UsersAPI.UsersPost,
			[]gin.HandlerFunc{},
		},
		{
			"UsersUuidGet",
			http.MethodGet,
			"/users/:uuid",
			handleFunctions.UsersAPI.UsersUuidGet,
			[]gin.HandlerFunc{},
		},
	}
}
